

=== What Are Microservices?
Microservices are small, autonomous services that work together.
Mircroservices are :
- Small, and Focused on Doing One Thing Well
- Autonomous
- Can be written and deployed in 2 Weeks.


Strong cohesion and loose coupling


==== Key Benefits
- Technology Heterogeneity : heterogeneous architecture
- Resilience
- Scaling: on demand Service scaling 
- Ease of Deployment
- Organizational Alignment
- Composability : holistic concepts of customer 
- Optimizing for Replaciblity 

==== What About Service-Oriented Architecture?
Service-oriented architecture (SOA) is a design approach where multiple services
collaborate to provide some end set of capabilities. A service here typically means a
completely separate operating system process. Communication between these services
occurs via calls across a network rather than method calls within a process boundary.

==== A Principaled Approach 
- Strategic Goals
- Principle 
- Practices 
- Combining Principles and Practices 


==== Governance through Code 
Technics which we can follow to ensure correct implementations of Microservice:
- Exemplars : A sort of Documents with specific guidelines/principles/practices to follow
- Tailored Service Template: Dropwizard and Karyon - Available service templates



=== How to Model Services

==== What makes a good Service 
- Loose Coupling and high Cohesion

Service Modelling
- Shared and Hidden Models
Bounded Context and Identify Service Boundaries

Advantages of Nested Bounded Context 
- Should be based on organisational structure
- Easy to Test as stubbing is not required for each service 


Find Sensible boundaries in our services.
    
More on Bounded Context : http://bit.ly/bounded-context-explained


=== Integration

==== Looking for ideal Integration Technology
- Keep your API Technology agnostic
- Make your Service Simple for Consumers
- Hide Internal Implementation Details


==== The Shared Database 
In which all the services would use Same Data Storage. The Disadvantages of above approach are:

- First, we are allowing external parties to view and bind to internal implementation details.
The data structures I store in the DB are fair game to all; they are shared in their entirety
with all other parties with access to the database. Changing DB schema results in breaking of
the existing system.

- Second, my consumers are tied to a specific technology choice.
(In terms of DATABASE) - Goodbye Loose Coupling

- Finally, let’s think about behavior for a moment. There is going to be logic associated with
how a customer is changed. Change of one entity may results in changing multiple services and 
that means - Goodby Cohesion 


==== Synchronous V/S Asynchoronous

With synchronous communication, a call is made to a remote server, which blocks until
the operation completes. This works on REQUEST/RESPONSE model. With request/response, 
a client initiates a request and waits for the response.
PROS - Easier to identify the result of the call as either it would be SUCCESS or FAIL 



With asynchronous communication, the caller doesn’t wait for the operation to complete before 
returning, and may not even care whether or not the operation completes at all. This works 
on event-based model. With an EVENT-BASED Collaboration, we invert things. 
Instead of a client initiating requests asking for things to be done, it instead says this 
thing happened and expects other parties to know what to do. We never tell anyone else what 
to do. Event-based systems by their nature are asynchronous.


PROS 
- Works way better when we have low netwrok latency and keep connection open for a longer 
period may result in slowness.
- Works well for Long running jobs.
- Event-based collaboration is also highly decoupled. The client that emits an
event doesn’t have any way of knowing who or what will react to it, which also means that
you can add new subscribers to these events without the client ever needing to know


==== Orchestration Versus Choreography

With orchestration, we rely on a central brain to guide and drive the process,
much like the conductor in an orchestra. 
In this approach, customer service act as the central
brain. On creation, it talks to the loyalty points bank, email service, and postal service 
through a series of request/response calls.
The downside to this orchestration approach is that the customer service can become too
much of a central governing authority.


With choreography, we inform each part of the
system of its job, and let it work out the details, like dancers all finding their way and
reacting to others around them in a ballet.
With this approach, we could instead just have the customer service emit an
event in an asynchronous manner, saying Customer created. The email service, postal
service, and loyalty points bank then just subscribe to these events and react accordingly.
This approach is significantly more decoupled. If some other service
needed to reach to the creation of a customer, it just needs to subscribe to the events and
do its job when needed. The downside is that the explicit view of the business process  
is now only implicitly reflected in our system.


===== Request/Response: 
- Remote procedure call (RPC) 
- REpresentational State Transfer(REST)

===== Event-based:
Implementing Asynchronous Event-based Colloboration
- Message Broker : RabbitMQ or Kafka
*Kafka - A Distributed Messaging Queue that is used by developers to publish messages and subscribes to topics 
with a certain message types.

Producers use an API to publish an event to the broker. The broker handles subscriptions, 
allowing consumers to be informed when an event arrives. These brokers can even handle the state
of consumers, for example by helping keep track of what messages they have seen before.

- Enterprise Service Bus 

====== Complexities of Asynchronous Architectures


===== Reactive Extensions
Reactive extensions, often shortened to Rx, are a mechanism to compose the results of
multiple calls together and run operations on them. The calls themselves could be
blocking or nonblocking calls. At its heart, Rx inverts traditional flows. Rather than asking
for some data, then performing operations on it, you observe the outcome of an operation
(or set of operations) and react when something changes. Some implementations of Rx
allow you to perform functions on these observables, such as RxJava, which allows
traditional functions like map or filter to be used.

===== Key Requirement
Six key requirements to overcome those challenges and leverage the full value of microservices:

Services Contract
Exposing microservices from existing applications
Discovery of services
Coordination across services
Managing complex deployments and their scalability
Visibility across services

=== Splitting the Monolith 
While Breaking the monolith application, the first thing is to identify the Bounded Context to do the breakup.

===== The Reasons to Split the Monolith
- Pace of Change
- Security 
- Team Structure
- Technology 


===== Manage Transaction Boundary in case of Microservices 
If we have multiple databases and we want to ensure that either event/records insertion happens
at both side or not happen at all. If one insert fails, then we have to issue a "COMPENSATING TRANSACTION" 
to remove the first insertion to achieve consistency in the Database.

Now what happens if "compensating transaction FAILS", in that case, it would become 
cumbersome to achieve the desired Outcome.

To Solve that, we have "DISTRIBUTED TRANASACTION" mechanism.
An alternative to manually orchestrating compensating transactions is to use a distributed
transaction. Distributed transactions try to span multiple transactions within them, using
some overall governing process called a transaction manager to orchestrate the various
transactions being done by underlying systems.

TWO-PHASE COMMIT 

The most common algorithm for handling distributed transactions — especially shortlived
transactions, as in the case of handling our customer order — is to use a two-phase
commit. With a TWO-PHASE COMMIT, first comes the voting phase. This is where each
participant (also called a cohort in this context) in the distributed transaction tells the
transaction manager whether it thinks its local transaction can go ahead. If the transaction
manager gets a yes vote from all participants, then it tells them all to go ahead and perform
their commits. A single no vote is enough for the transaction manager to send out a
rollback to all parties. 
EXAMPLE - Java’s Transaction API

PROBLEM WITH TWO-PHASE COMMIT 
This approach relies on all parties halting until the central coordinating process tells them
to proceed. This means we are vulnerable to outages. If the transaction manager goes
down, the pending transactions never complete. If a cohort fails to respond during voting,
everything blocks. And there is also the case of what happens if a commit fails after
voting. There is an assumption implicit in this algorithm that this cannot happen: if a
cohort says yes during the voting period, then we have to assume it will commit. Cohorts
need a way of making this commit work at some point. This means this algorithm isn’t
foolproof — rather, it just tries to catch most failure cases


- TWO-PHASE COMMIT 
- EVENTUAL CONSISTENCY
- COMPENSATING TRANSACTION
- DISTRIBUTED TRANASACTION
- LONG TAIL OF DATA 
- EXPENSIVE CACHE MISS 


*How to handle REPORTING When we need to perform JOINS on Multiple Tables: 

====== Usual Approach:
Typically we won’t run these reports on the main database for fear of the load 
generated by our queries impacting the performance of the main system, so often these reporting systems hang on a
read replica as the MAIN DATABASE will be in SYNC with REPORT DATABASE. 
The REPORT DATABASE will be only with READ ACCESS.

====== Solutions / Various Approaches 

- Data Retrieval via Service Calls
In case of Microservices, to FETCH the large volume data :
For example, the customer service might expose something like a BatchCustomerExport
resource endpoint. The calling system would POST a BatchRequest, perhaps passing in a
location where a file can be placed with all the data. The customer service would return an
HTTP 202 response code, indicating that the request was accepted but has not yet been
processed. The calling system could then poll the resource waiting until it retrieves a 201
Created status, indicating that the request has been fulfilled, and then the calling system
could go and fetch the data. This would allow potentially large data files to be exported
without the overhead of being sent over HTTP; instead, the system could simply save a
CSV file to a shared location.

- Data Pumps
Rather than have the reporting system pull the data, we could instead have the data pushed
to the reporting system. One of the downsides of retrieving the data by standard HTTP
calls is the overhead of HTTP when we’re making a large number of calls, together with
the overhead of having to create APIs that may exist only for reporting purposes. An
alternative option is to have a standalone program that directly accesses the database of
the service that is the source of data, and pumps it into a reporting database,

- Event Data Pump
IBefore we touched on the idea of microservices emitting events based on the state
change of entities that they manage. For example, our customer service may emit an event
when a given customer is created, or updated, or deleted. For those microservices that
expose such event feeds, we have the option of writing our own event subscriber that
pumps data into the reporting database





=== Deployment
The approach I prefer is to have a single CI build per microservice, to allow us to quickly make 
and validate a change prior to deployment into production.

"Packer" is a tool designed to make creation of images much easier. Using configuration
scripts of your choice (Chef, Ansible, Puppet, and more are supported), it allows us to
create images for different platforms from the same configuration.


Immutable Servers - 
By storing all our configuration in source control, we are trying to ensure that we can
automatically reproduce services and hopefully entire environments at will.

=== Testing 


=== Monitoring 


=== Security 


=== Microservice Design 


=== Scaling 


==== Tech Stack 

- Monitoring - Metrics : Graphite

- Monitoring - Health  : Nagios

- JVM based Microservice Containers - Dropwizard, Karyon
They work in similar ways, pulling together a set of libraries to provide features 
like health checking, serving HTTP, or exposing metrics.



=== Keywords

- Technology-agnostic APIs
- Distributed Transactions
- CAP Theorm
- Potential Failures of Downstream Calls  
- Circuit Breaker 
- Sidecar Services
- trade-off 

- Bounded Context
- Higher-level Bounded Context
- Nested Context 
- Top-Level Context
- Explicit Interface
- Ubiquitous Languages
- Repository Abstractions 
- Domain-Driven Design
- Premature Decomopostion
- eventual consistency
- Onion Architecture: Because made of lots of layers and make us cry when cut through it.

- Technology agnostic
- Loosly coupled event-driven Architecture
- Message Broker 
- Enterprise Service Bus 
- More decoupled and Scalable Systems 
- These Programming styles lead to 
- Intra-process Synchronous Message call
- correlation IDs
- Enterprise Integration Pattern
- Long-running Async Request/Response
- More Cohesion starts to break down    


=== REFERENCE:
https://dzone.com/articles/10-challenges-of-microservices-and-solutions-tips
