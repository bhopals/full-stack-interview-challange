

=== What Are Microservices?
Microservices are small, autonomous services that work together.
Mircroservices are :
- Small, and Focused on Doing One Thing Well
- Autonomous
- Can be written and deployed in 2 Weeks.


==== Key Benefits
- Technology Heterogeneity : heterogeneous architecture
- Resilience
- Scaling: on demand Service scaling 
- Ease of Deployment
- Organizational Alignment
- Composability : holistic concepts of customer 
- Optimizing for Replaciblity 

==== What About Service-Oriented Architecture?
Service-oriented architecture (SOA) is a design approach where multiple services
collaborate to provide some end set of capabilities. A service here typically means a
completely separate operating system process. Communication between these services
occurs via calls across a network rather than method calls within a process boundary.

==== A Principaled Approach 
- Strategic Goals
- Principle 
- Practices 
- Combining Principles and Practices 


==== Governance through Code 
Technics which we can follow to ensure correct implementations of Microservice:
- Exemplars : A sort of Documents with specific guidelines/principles/practices to follow
- Tailored Service Template: Dropwizard and Karyon - Available service templates



=== How to Model Services

==== What makes a good Service 
- Loose Coupling and high Cohesion

Service Modelling
- Shared and Hidden Models
Bounded Context and Identify Service Boundaries

Advantages of Nested Bounded Context 
- Should be based on organisational structure
- Easy to Test as stubbing is not required for each service 

=== Integration




=== Splitting the Monolith 



=== Deployment



=== Testing 


=== Monitoring 


=== Security 


=== Microservice Design 


=== Scaling 


==== Tech Stack 

- Monitoring - Metrics : Graphite

- Monitoring - Health  : Nagios

- JVM based Microservice Containers - Dropwizard, Karyon
They work in similar ways, pulling together a set of libraries to provide features 
like health checking, serving HTTP, or exposing metrics.



=== Keywords

- Technology-agnostic APIs
- Distributed Transactions
- CAP Theorm
- Potential Failures of Downstream Calls  
- Circuit Breaker 
- Sidecar Services
- trade-off 

- Bounded Context
- Higher-level Bounded Context
- Nested Context 
- Top-Level Context
- Explicit Interface
- Ubiquitous Languages
- Repository Abstractions 
- Domain-Driven Design
- Premature Decomopostion
- Onion Architecture: Because made of lots of layers and make us cry when cut through it.